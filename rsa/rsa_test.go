package rsa

import (
	"encoding/base64"
	"encoding/hex"
	"os"
	"testing"
)

func TestRsaGenRsaKey(t *testing.T) {
	GenRsaKey(2048)
}

func TestRsa(t *testing.T) {
	GenRsaKey(2048)

	data := []byte("hello world")

	private, err := os.ReadFile("private.pem")
	if err != nil {
		panic(err)
	}

	public, err := os.ReadFile("public.pem")
	if err != nil {
		panic(err)
	}

	encrypt, _ := Encrypt(data, public)
	t.Log(hex.EncodeToString(encrypt))

	decrypt, _ := Decrypt(encrypt, private)
	t.Log(string(decrypt))
}

func TestRsaJava(t *testing.T) {
	src := []byte("hello world")
	pri := "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"
	pub := "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAjAA4SrBl02xA3iYZOqYrQcvC/IE72yucXSRxYRZgvW3xpvcOYvo0NGiUWPnnkXWKjNx1+eUmV/wNvDRQQuhsmNNGhVlKGUbXn6a0eqNL5awxY4bDW2dfJ2SXUA2GZZTd+sBPnZSRwL1ejsMGPvxg5kd6aDeb2uH9KwfHSEQh4w9i+63xvSxSAVVMusBBVerNrNbgdHz5Ht+lA6H5IfDud/KE9tCPJfG+vE1vpP+FT1ArQTKl257ksHl7X8GiCb54/qjgA+wN4RjiX+dq7CnpX13mwOdW4TT/2cFnyW+PDY1fNVk849mX48cTnLDb0Be1S249FT9iwV0QOMY/s2yuYHhW2YvI9HKksT5zwYgVhY/OOSAjH3bekiHGYMIRqNjy5TK0F+4JokbIKKfs3RugVp57cDax+t/RnSHr9VQgcMXcfJ9xFOt7uAlOKY1eX4e6oIlt2jW8b3cH5DnHZ3Ukcf0UyEWLO503Wl+cmBnEmZ5Jb5vpRYSyK6vJMUK1+9/K5HQt6B83jVNHYRBNBOaGNurbc+OA4E/nuyMI7LMld1FdXyf447UFHOZoCB1O8dALQNyb/wdW/YppgRfN0MH//+/gFje2DfNEpGTG4cxmaEX8knEdvbLSFMcdw9eInCRNUVe4i/jqPwXV1y516IHRZzvF75NNO1jLxJz1be/h+d0CAwEAAQ=="
	pubs, _ := base64.StdEncoding.DecodeString(pub)
	encrypt, _ := Encrypt(src, pubs)
	t.Log(base64.StdEncoding.EncodeToString(encrypt))
	pris, _ := base64.StdEncoding.DecodeString(pri)
	decrypt, _ := Decrypt(encrypt, pris)
	t.Log(string(decrypt))
}
